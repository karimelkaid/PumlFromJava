@startuml
'https://plantuml.com/class-diagram

class PumlDoclet
{
    + init(Locale:locale, Reporter:reporter) {redefined Doclet::init()}
    + getName() : String {redefined Doclet::getName()}
    + getSupportedOptions() : Set<? extends Option> {redefined Doclet::getSupportedOptions()}
    + getSupportedSourceVersion() : SourceVersion {redefined Doclet::getSupportedSourceVersion()}
    + run(DocletEnvironment:environment) : Boolean {redefined Doclet::run()}
}

class PumlPackage
{
    - environment : DocletEnvironment
    <<Create>> PumlPackage(environnement : DocletEnvironment)
    + ajoutePackage(codePumlDeBase : StringBuilder) : StringBuilder
}
PumlPackage ..> DocletEnvironment : <<use>>

class PumlChamps
{
    - classe : Element
    - champs : String[*]

    <<Create>> PumlChamps(classe : Element)
    + ajouteChamps(codePumlDeBase : StringBuilder) : StringBuilder
    + getPrimitiveFieldsNamesAndConstEnum() : String[*]
}
PumlChamps ..> Element : <<use>>

class PumlTypeClasse
{
    - classe : Element
    - typeClasse : String

    + <<Create>> PumlTypeClasse(classe : Element)
    + ajouteTypeClasse(codePumlDeBase : StringBuilder) : StringBuilder
    + getTypeClasse() : String
}
PumlTypeClasse ..> Element : <<use>>

class PumlRelation
{
    - classe : Element
    - typeClasse : String
    - pumlAgregation : PumlAgregation
    - pumlSuperClass : PumlSuperClass
    - pumlImplementation : PumlImplementation

    + <<Create>> PumlRelation(classe : Element)
    + ajouteAgregations(codePumlDeBase : StringBuilder) : StringBuilder
    + ajouteSuperClass(codePumlDeBase : StringBuilder) : StringBuilder
    + ajouteImplementations(codePumlDeBase : StringBuilder) : StringBuilder
}
PumlRelation ..> Element : <<use>>

class PumlImplementation
{
    classe : Element
    nomInterfaces : String[*]
    typeClasse : String

    + <<Create>> PumlImplementation(classe : Element, typeClasse : String)
    + ajouteImplementations(codePumlDeBase : StringBuilder) : StringBuilder
    + getInterfaces() : String[*]
}
PumlImplementation ..> Element : <<use>>

class PumlSuperClass
{
    - classe : Element
    - nomSuperClasse : String

    + <<Create>> PumlSuperClass(classe : Element)
    + ajouteSuperClass(codePumlDeBase : StringBuilder) : StringBuilder
    + getSuperClassName() : String
}
PumlSuperClass ..> Element : <<use>>

class PumlAgregation
{
    - classe : Element
    - agregationsExistantes : String[*]
    - typeNonVoulu : String[*]

    + <<Create>> PumlAgregation(classe : Element)
    + ajouteAgregations(codePumlDeBase : StringBuilder) : StringBuilder
    + liaisonExistante(agregationsExistantes : String[*], liaison : String) : Boolean
    + inverseLiaison(liaison : String) : String
}
PumlAgregation ..> Element : <<use>>

class ToolProvider
{
    + findFirst(name : String) : ToolProvider
}


class Java2Puml
{
    + {static} main(String[]:args)
}

class PumlDiagram
{
    - repertoireDestination : String
    - nomFichierACree : String
    - environment : DocletEnvironment

    + <<Create>> PumlDiagram(repertoireDestination : String, nomFichierACree : String, environment : DocletEnvironment)
    + getRepertoireDestination() : String
    + getNomFichierACreer() : String
    + getEnvironment() : DocletEnvironment

    + generePuml()
    + recupClasses(environment : DocletEnvironment) : Element[*]
    + ecrisCodePuml(classes : Element[*]) : String

}

interface Doclet <<interface>>
{
    + init(Locale:locale, Reporter:reporter)
    + getName() : String
    + getSupportedOptions() : Set<? extends Option>
    + getSupportedSourceVersion() : SourceVersion
    + run(DocletEnvironment:environment) : Boolean
}
interface "Doclet.Option" as docletOption <<interface>>
{
    + getArgumentCount() : int
    + getDescription() : String
    + getKind() : Option.Kind
    + getNames() : String[*]
    + getParameters() : String
    + process(option : String, arguments : String[*]) : Boolean
}

enum "Doclet.Option.Kind" as docletOptionKind <<enum>>
{
    EXTENDED
    STANDARD
    OTHER
}

interface DocletEnvironment <<interface>>
{
    + getSpecifiedElements() : Element[]
    + getIncludedElements() : Element[]
    + getDocTrees() : DocTrees
    + getElementUtils() : Elements
    + getTypeUtils() : Types
    + isIncluded(e : Element) : Boolean
    + isSelected(e : Element) : Boolean
    + getFileKind(type : TypeElement) : Kind
}
enum "DocletEnvironment.ModuleMode" as ModuleMode <<enum>>
{
    API
    ALL
}
DocletEnvironment ..> ModuleMode : <<use>>

interface Element
{
    + getEnclosedElements() : Element
    + getEnclosingElement() : Element[*]
    + getKind() : ElementKind
    + getModifiers() : Modifier[]
    + getSimpleName() : Name
    + equals(obj : Object) : Boolean {redefined Object::equals()}
    + asType() : TypeMirror
}

class Locale implements Cloneable, Serializable
interface Reporter <<interface>>
Doclet ..> Locale : <<use>>
Doclet ..> Reporter : <<use>>


Java2Puml ..> ToolProvider : <<instanciate>>

PumlDiagram ..> DocletEnvironment : <<use>>
Doclet ..> DocletEnvironment : <<use>>
docletOption <.. Doclet : <<use>>
docletOptionKind <.. docletOption : <<use>>

PumlDoclet ...|> Doclet
Java2Puml " 1\t" -- "1\ndoclet" PumlDoclet : appelle >
PumlDoclet  " 1" ...> "1\ndiagrammeUML" PumlDiagram : <<instanciate>>
PumlDiagram ..> Element : <<use>>


enum ElementKind
{
    ANNOTATION_TYPE
    CLASS
    CONSTRUCTOR
    ENUM
    ENUM_CONSTANT
    EXCEPTION_PARAMETER
    FIELD
    INSTANCE_INIT
    INTERFACE
    LOCAL_VARIABLE
    METHOD
    MODULE
    OTHER
    PACKAGE
    PARAMETER
    RESSOURCE_VARIABLE
    STATIC_INIT
    TYPE_PARAMETER
    isClass()
    isField()
    isInterface()
}

class DocTrees extends Trees
{
    + <<Create>> DocTrees()

    + getBreakIterator() : BreakIterator
    + getDocCommentTree(path : TreePath) : DocCommentTree
    + getDocCommentTree(e : Element) : DocCommentTree
    + getDocCommentTree(fileObject : FileObject) : DocCommentTree

    + getDocTreePath(fileObject : FileObject, packageElement : PackageElement) : DocTreePath
    + getElement(path : DocTreePath) : Element
    + getType(path : DocTreePath) : TypeMirror
    + getFirstSentence(list : DocTree[*]) : DocTree[*]
    + getSourcePositions() : DocSourcePositions
    + getDocTreeFactory() : DocTreeFactory
    + getCharacters(tree : EntityTree) : String
}


PumlDiagram ..> PumlPackage : <<instanciate>>
PumlDiagram ..> PumlTypeClasse : <<instanciate>>
PumlDiagram ..> PumlChamps : <<instanciate>>
PumlDiagram ..> PumlRelation : <<instanciate>>

PumlRelation ..> PumlAgregation : <<instanciate>>
PumlRelation ..> PumlSuperClass : <<instanciate>>
PumlRelation ..> PumlImplementation : <<instanciate>>


@enduml